/*
 * This file is generated by jOOQ.
*/
package com.graphql.example.db.data.tables;


import com.graphql.example.db.data.DefaultSchema;
import com.graphql.example.db.data.Indexes;
import com.graphql.example.db.data.Keys;
import com.graphql.example.db.data.tables.records.InvoicesRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Invoices extends TableImpl<InvoicesRecord> {

    private static final long serialVersionUID = -1958975517;

    /**
     * The reference instance of <code>invoices</code>
     */
    public static final Invoices INVOICES = new Invoices();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InvoicesRecord> getRecordType() {
        return InvoicesRecord.class;
    }

    /**
     * The column <code>invoices.InvoiceId</code>.
     */
    public final TableField<InvoicesRecord, Integer> INVOICEID = createField("InvoiceId", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>invoices.CustomerId</code>.
     */
    public final TableField<InvoicesRecord, Integer> CUSTOMERID = createField("CustomerId", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>invoices.InvoiceDate</code>.
     */
    public final TableField<InvoicesRecord, Timestamp> INVOICEDATE = createField("InvoiceDate", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>invoices.BillingAddress</code>.
     */
    public final TableField<InvoicesRecord, String> BILLINGADDRESS = createField("BillingAddress", org.jooq.impl.SQLDataType.NVARCHAR(70), this, "");

    /**
     * The column <code>invoices.BillingCity</code>.
     */
    public final TableField<InvoicesRecord, String> BILLINGCITY = createField("BillingCity", org.jooq.impl.SQLDataType.NVARCHAR(40), this, "");

    /**
     * The column <code>invoices.BillingState</code>.
     */
    public final TableField<InvoicesRecord, String> BILLINGSTATE = createField("BillingState", org.jooq.impl.SQLDataType.NVARCHAR(40), this, "");

    /**
     * The column <code>invoices.BillingCountry</code>.
     */
    public final TableField<InvoicesRecord, String> BILLINGCOUNTRY = createField("BillingCountry", org.jooq.impl.SQLDataType.NVARCHAR(40), this, "");

    /**
     * The column <code>invoices.BillingPostalCode</code>.
     */
    public final TableField<InvoicesRecord, String> BILLINGPOSTALCODE = createField("BillingPostalCode", org.jooq.impl.SQLDataType.NVARCHAR(10), this, "");

    /**
     * The column <code>invoices.Total</code>.
     */
    public final TableField<InvoicesRecord, BigDecimal> TOTAL = createField("Total", org.jooq.impl.SQLDataType.NUMERIC(10, 2).nullable(false), this, "");

    /**
     * Create a <code>invoices</code> table reference
     */
    public Invoices() {
        this(DSL.name("invoices"), null);
    }

    /**
     * Create an aliased <code>invoices</code> table reference
     */
    public Invoices(String alias) {
        this(DSL.name(alias), INVOICES);
    }

    /**
     * Create an aliased <code>invoices</code> table reference
     */
    public Invoices(Name alias) {
        this(alias, INVOICES);
    }

    private Invoices(Name alias, Table<InvoicesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Invoices(Name alias, Table<InvoicesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IFK_INVOICECUSTOMERID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<InvoicesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_INVOICES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<InvoicesRecord> getPrimaryKey() {
        return Keys.PK_INVOICES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<InvoicesRecord>> getKeys() {
        return Arrays.<UniqueKey<InvoicesRecord>>asList(Keys.PK_INVOICES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<InvoicesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<InvoicesRecord, ?>>asList(Keys.FK_INVOICES_CUSTOMERS_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Invoices as(String alias) {
        return new Invoices(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Invoices as(Name alias) {
        return new Invoices(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Invoices rename(String name) {
        return new Invoices(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Invoices rename(Name name) {
        return new Invoices(name, null);
    }
}
