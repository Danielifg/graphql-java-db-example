/*
 * This file is generated by jOOQ.
*/
package com.graphql.example.db.data.tables;


import com.graphql.example.db.data.DefaultSchema;
import com.graphql.example.db.data.Indexes;
import com.graphql.example.db.data.Keys;
import com.graphql.example.db.data.tables.records.TracksRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tracks extends TableImpl<TracksRecord> {

    private static final long serialVersionUID = 197233955;

    /**
     * The reference instance of <code>tracks</code>
     */
    public static final Tracks TRACKS = new Tracks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TracksRecord> getRecordType() {
        return TracksRecord.class;
    }

    /**
     * The column <code>tracks.TrackId</code>.
     */
    public final TableField<TracksRecord, Integer> TRACKID = createField("TrackId", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>tracks.Name</code>.
     */
    public final TableField<TracksRecord, String> NAME = createField("Name", org.jooq.impl.SQLDataType.NVARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>tracks.AlbumId</code>.
     */
    public final TableField<TracksRecord, Integer> ALBUMID = createField("AlbumId", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>tracks.MediaTypeId</code>.
     */
    public final TableField<TracksRecord, Integer> MEDIATYPEID = createField("MediaTypeId", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>tracks.GenreId</code>.
     */
    public final TableField<TracksRecord, Integer> GENREID = createField("GenreId", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>tracks.Composer</code>.
     */
    public final TableField<TracksRecord, String> COMPOSER = createField("Composer", org.jooq.impl.SQLDataType.NVARCHAR(220), this, "");

    /**
     * The column <code>tracks.Milliseconds</code>.
     */
    public final TableField<TracksRecord, Integer> MILLISECONDS = createField("Milliseconds", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>tracks.Bytes</code>.
     */
    public final TableField<TracksRecord, Integer> BYTES = createField("Bytes", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>tracks.UnitPrice</code>.
     */
    public final TableField<TracksRecord, BigDecimal> UNITPRICE = createField("UnitPrice", org.jooq.impl.SQLDataType.NUMERIC(10, 2).nullable(false), this, "");

    /**
     * Create a <code>tracks</code> table reference
     */
    public Tracks() {
        this(DSL.name("tracks"), null);
    }

    /**
     * Create an aliased <code>tracks</code> table reference
     */
    public Tracks(String alias) {
        this(DSL.name(alias), TRACKS);
    }

    /**
     * Create an aliased <code>tracks</code> table reference
     */
    public Tracks(Name alias) {
        this(alias, TRACKS);
    }

    private Tracks(Name alias, Table<TracksRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tracks(Name alias, Table<TracksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IFK_TRACKALBUMID, Indexes.IFK_TRACKGENREID, Indexes.IFK_TRACKMEDIATYPEID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TracksRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TRACKS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TracksRecord> getPrimaryKey() {
        return Keys.PK_TRACKS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TracksRecord>> getKeys() {
        return Arrays.<UniqueKey<TracksRecord>>asList(Keys.PK_TRACKS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TracksRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TracksRecord, ?>>asList(Keys.FK_TRACKS_ALBUMS_1, Keys.FK_TRACKS_MEDIA_TYPES_1, Keys.FK_TRACKS_GENRES_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tracks as(String alias) {
        return new Tracks(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tracks as(Name alias) {
        return new Tracks(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tracks rename(String name) {
        return new Tracks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tracks rename(Name name) {
        return new Tracks(name, null);
    }
}
