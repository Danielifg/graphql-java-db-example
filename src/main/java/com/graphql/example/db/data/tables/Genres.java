/*
 * This file is generated by jOOQ.
*/
package com.graphql.example.db.data.tables;


import com.graphql.example.db.data.DefaultSchema;
import com.graphql.example.db.data.Keys;
import com.graphql.example.db.data.tables.records.GenresRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Genres extends TableImpl<GenresRecord> {

    private static final long serialVersionUID = -1063773786;

    /**
     * The reference instance of <code>genres</code>
     */
    public static final Genres GENRES = new Genres();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GenresRecord> getRecordType() {
        return GenresRecord.class;
    }

    /**
     * The column <code>genres.GenreId</code>.
     */
    public final TableField<GenresRecord, Integer> GENREID = createField("GenreId", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>genres.Name</code>.
     */
    public final TableField<GenresRecord, String> NAME = createField("Name", org.jooq.impl.SQLDataType.NVARCHAR(120), this, "");

    /**
     * Create a <code>genres</code> table reference
     */
    public Genres() {
        this(DSL.name("genres"), null);
    }

    /**
     * Create an aliased <code>genres</code> table reference
     */
    public Genres(String alias) {
        this(DSL.name(alias), GENRES);
    }

    /**
     * Create an aliased <code>genres</code> table reference
     */
    public Genres(Name alias) {
        this(alias, GENRES);
    }

    private Genres(Name alias, Table<GenresRecord> aliased) {
        this(alias, aliased, null);
    }

    private Genres(Name alias, Table<GenresRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<GenresRecord, Integer> getIdentity() {
        return Keys.IDENTITY_GENRES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<GenresRecord> getPrimaryKey() {
        return Keys.PK_GENRES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<GenresRecord>> getKeys() {
        return Arrays.<UniqueKey<GenresRecord>>asList(Keys.PK_GENRES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Genres as(String alias) {
        return new Genres(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Genres as(Name alias) {
        return new Genres(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Genres rename(String name) {
        return new Genres(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Genres rename(Name name) {
        return new Genres(name, null);
    }
}
