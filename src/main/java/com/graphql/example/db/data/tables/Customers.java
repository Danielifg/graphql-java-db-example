/*
 * This file is generated by jOOQ.
*/
package com.graphql.example.db.data.tables;


import com.graphql.example.db.data.DefaultSchema;
import com.graphql.example.db.data.Indexes;
import com.graphql.example.db.data.Keys;
import com.graphql.example.db.data.tables.records.CustomersRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Customers extends TableImpl<CustomersRecord> {

    private static final long serialVersionUID = -1140351268;

    /**
     * The reference instance of <code>customers</code>
     */
    public static final Customers CUSTOMERS = new Customers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CustomersRecord> getRecordType() {
        return CustomersRecord.class;
    }

    /**
     * The column <code>customers.CustomerId</code>.
     */
    public final TableField<CustomersRecord, Integer> CUSTOMERID = createField("CustomerId", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>customers.FirstName</code>.
     */
    public final TableField<CustomersRecord, String> FIRSTNAME = createField("FirstName", org.jooq.impl.SQLDataType.NVARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>customers.LastName</code>.
     */
    public final TableField<CustomersRecord, String> LASTNAME = createField("LastName", org.jooq.impl.SQLDataType.NVARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>customers.Company</code>.
     */
    public final TableField<CustomersRecord, String> COMPANY = createField("Company", org.jooq.impl.SQLDataType.NVARCHAR(80), this, "");

    /**
     * The column <code>customers.Address</code>.
     */
    public final TableField<CustomersRecord, String> ADDRESS = createField("Address", org.jooq.impl.SQLDataType.NVARCHAR(70), this, "");

    /**
     * The column <code>customers.City</code>.
     */
    public final TableField<CustomersRecord, String> CITY = createField("City", org.jooq.impl.SQLDataType.NVARCHAR(40), this, "");

    /**
     * The column <code>customers.State</code>.
     */
    public final TableField<CustomersRecord, String> STATE = createField("State", org.jooq.impl.SQLDataType.NVARCHAR(40), this, "");

    /**
     * The column <code>customers.Country</code>.
     */
    public final TableField<CustomersRecord, String> COUNTRY = createField("Country", org.jooq.impl.SQLDataType.NVARCHAR(40), this, "");

    /**
     * The column <code>customers.PostalCode</code>.
     */
    public final TableField<CustomersRecord, String> POSTALCODE = createField("PostalCode", org.jooq.impl.SQLDataType.NVARCHAR(10), this, "");

    /**
     * The column <code>customers.Phone</code>.
     */
    public final TableField<CustomersRecord, String> PHONE = createField("Phone", org.jooq.impl.SQLDataType.NVARCHAR(24), this, "");

    /**
     * The column <code>customers.Fax</code>.
     */
    public final TableField<CustomersRecord, String> FAX = createField("Fax", org.jooq.impl.SQLDataType.NVARCHAR(24), this, "");

    /**
     * The column <code>customers.Email</code>.
     */
    public final TableField<CustomersRecord, String> EMAIL = createField("Email", org.jooq.impl.SQLDataType.NVARCHAR(60).nullable(false), this, "");

    /**
     * The column <code>customers.SupportRepId</code>.
     */
    public final TableField<CustomersRecord, Integer> SUPPORTREPID = createField("SupportRepId", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>customers</code> table reference
     */
    public Customers() {
        this(DSL.name("customers"), null);
    }

    /**
     * Create an aliased <code>customers</code> table reference
     */
    public Customers(String alias) {
        this(DSL.name(alias), CUSTOMERS);
    }

    /**
     * Create an aliased <code>customers</code> table reference
     */
    public Customers(Name alias) {
        this(alias, CUSTOMERS);
    }

    private Customers(Name alias, Table<CustomersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Customers(Name alias, Table<CustomersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IFK_CUSTOMERSUPPORTREPID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CustomersRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CUSTOMERS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CustomersRecord> getPrimaryKey() {
        return Keys.PK_CUSTOMERS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CustomersRecord>> getKeys() {
        return Arrays.<UniqueKey<CustomersRecord>>asList(Keys.PK_CUSTOMERS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<CustomersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CustomersRecord, ?>>asList(Keys.FK_CUSTOMERS_EMPLOYEES_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Customers as(String alias) {
        return new Customers(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Customers as(Name alias) {
        return new Customers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Customers rename(String name) {
        return new Customers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Customers rename(Name name) {
        return new Customers(name, null);
    }
}
