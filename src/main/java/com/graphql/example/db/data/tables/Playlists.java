/*
 * This file is generated by jOOQ.
*/
package com.graphql.example.db.data.tables;


import com.graphql.example.db.data.DefaultSchema;
import com.graphql.example.db.data.Keys;
import com.graphql.example.db.data.tables.records.PlaylistsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Playlists extends TableImpl<PlaylistsRecord> {

    private static final long serialVersionUID = 1277487584;

    /**
     * The reference instance of <code>playlists</code>
     */
    public static final Playlists PLAYLISTS = new Playlists();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlaylistsRecord> getRecordType() {
        return PlaylistsRecord.class;
    }

    /**
     * The column <code>playlists.PlaylistId</code>.
     */
    public final TableField<PlaylistsRecord, Integer> PLAYLISTID = createField("PlaylistId", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>playlists.Name</code>.
     */
    public final TableField<PlaylistsRecord, String> NAME = createField("Name", org.jooq.impl.SQLDataType.NVARCHAR(120), this, "");

    /**
     * Create a <code>playlists</code> table reference
     */
    public Playlists() {
        this(DSL.name("playlists"), null);
    }

    /**
     * Create an aliased <code>playlists</code> table reference
     */
    public Playlists(String alias) {
        this(DSL.name(alias), PLAYLISTS);
    }

    /**
     * Create an aliased <code>playlists</code> table reference
     */
    public Playlists(Name alias) {
        this(alias, PLAYLISTS);
    }

    private Playlists(Name alias, Table<PlaylistsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Playlists(Name alias, Table<PlaylistsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PlaylistsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PLAYLISTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PlaylistsRecord> getPrimaryKey() {
        return Keys.PK_PLAYLISTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PlaylistsRecord>> getKeys() {
        return Arrays.<UniqueKey<PlaylistsRecord>>asList(Keys.PK_PLAYLISTS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Playlists as(String alias) {
        return new Playlists(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Playlists as(Name alias) {
        return new Playlists(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Playlists rename(String name) {
        return new Playlists(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Playlists rename(Name name) {
        return new Playlists(name, null);
    }
}
