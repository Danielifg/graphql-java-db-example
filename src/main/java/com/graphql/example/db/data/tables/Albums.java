/*
 * This file is generated by jOOQ.
*/
package com.graphql.example.db.data.tables;


import com.graphql.example.db.data.DefaultSchema;
import com.graphql.example.db.data.Indexes;
import com.graphql.example.db.data.Keys;
import com.graphql.example.db.data.tables.records.AlbumsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Albums extends TableImpl<AlbumsRecord> {

    private static final long serialVersionUID = -2080372757;

    /**
     * The reference instance of <code>albums</code>
     */
    public static final Albums ALBUMS = new Albums();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AlbumsRecord> getRecordType() {
        return AlbumsRecord.class;
    }

    /**
     * The column <code>albums.AlbumId</code>.
     */
    public final TableField<AlbumsRecord, Integer> ALBUMID = createField("AlbumId", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>albums.Title</code>.
     */
    public final TableField<AlbumsRecord, String> TITLE = createField("Title", org.jooq.impl.SQLDataType.NVARCHAR(160).nullable(false), this, "");

    /**
     * The column <code>albums.ArtistId</code>.
     */
    public final TableField<AlbumsRecord, Integer> ARTISTID = createField("ArtistId", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>albums</code> table reference
     */
    public Albums() {
        this(DSL.name("albums"), null);
    }

    /**
     * Create an aliased <code>albums</code> table reference
     */
    public Albums(String alias) {
        this(DSL.name(alias), ALBUMS);
    }

    /**
     * Create an aliased <code>albums</code> table reference
     */
    public Albums(Name alias) {
        this(alias, ALBUMS);
    }

    private Albums(Name alias, Table<AlbumsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Albums(Name alias, Table<AlbumsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IFK_ALBUMARTISTID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AlbumsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ALBUMS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AlbumsRecord> getPrimaryKey() {
        return Keys.PK_ALBUMS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AlbumsRecord>> getKeys() {
        return Arrays.<UniqueKey<AlbumsRecord>>asList(Keys.PK_ALBUMS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AlbumsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AlbumsRecord, ?>>asList(Keys.FK_ALBUMS_ARTISTS_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Albums as(String alias) {
        return new Albums(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Albums as(Name alias) {
        return new Albums(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Albums rename(String name) {
        return new Albums(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Albums rename(Name name) {
        return new Albums(name, null);
    }
}
