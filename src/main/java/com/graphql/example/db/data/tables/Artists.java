/*
 * This file is generated by jOOQ.
*/
package com.graphql.example.db.data.tables;


import com.graphql.example.db.data.DefaultSchema;
import com.graphql.example.db.data.Keys;
import com.graphql.example.db.data.tables.records.ArtistsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Artists extends TableImpl<ArtistsRecord> {

    private static final long serialVersionUID = 946906410;

    /**
     * The reference instance of <code>artists</code>
     */
    public static final Artists ARTISTS = new Artists();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArtistsRecord> getRecordType() {
        return ArtistsRecord.class;
    }

    /**
     * The column <code>artists.ArtistId</code>.
     */
    public final TableField<ArtistsRecord, Integer> ARTISTID = createField("ArtistId", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>artists.Name</code>.
     */
    public final TableField<ArtistsRecord, String> NAME = createField("Name", org.jooq.impl.SQLDataType.NVARCHAR(120), this, "");

    /**
     * Create a <code>artists</code> table reference
     */
    public Artists() {
        this(DSL.name("artists"), null);
    }

    /**
     * Create an aliased <code>artists</code> table reference
     */
    public Artists(String alias) {
        this(DSL.name(alias), ARTISTS);
    }

    /**
     * Create an aliased <code>artists</code> table reference
     */
    public Artists(Name alias) {
        this(alias, ARTISTS);
    }

    private Artists(Name alias, Table<ArtistsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Artists(Name alias, Table<ArtistsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ArtistsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ARTISTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ArtistsRecord> getPrimaryKey() {
        return Keys.PK_ARTISTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ArtistsRecord>> getKeys() {
        return Arrays.<UniqueKey<ArtistsRecord>>asList(Keys.PK_ARTISTS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Artists as(String alias) {
        return new Artists(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Artists as(Name alias) {
        return new Artists(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Artists rename(String name) {
        return new Artists(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Artists rename(Name name) {
        return new Artists(name, null);
    }
}
