/*
 * This file is generated by jOOQ.
*/
package com.graphql.example.db.data.tables.records;


import com.graphql.example.db.data.tables.Albums;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AlbumsRecord extends UpdatableRecordImpl<AlbumsRecord> implements Record3<Integer, String, Integer> {

    private static final long serialVersionUID = -441886165;

    /**
     * Setter for <code>albums.AlbumId</code>.
     */
    public void setAlbumid(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>albums.AlbumId</code>.
     */
    public Integer getAlbumid() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>albums.Title</code>.
     */
    public void setTitle(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>albums.Title</code>.
     */
    public String getTitle() {
        return (String) get(1);
    }

    /**
     * Setter for <code>albums.ArtistId</code>.
     */
    public void setArtistid(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>albums.ArtistId</code>.
     */
    public Integer getArtistid() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<Integer, String, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return Albums.ALBUMS.ALBUMID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Albums.ALBUMS.TITLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field3() {
        return Albums.ALBUMS.ARTISTID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component1() {
        return getAlbumid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getTitle();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component3() {
        return getArtistid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getAlbumid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getTitle();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value3() {
        return getArtistid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AlbumsRecord value1(Integer value) {
        setAlbumid(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AlbumsRecord value2(String value) {
        setTitle(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AlbumsRecord value3(Integer value) {
        setArtistid(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AlbumsRecord values(Integer value1, String value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AlbumsRecord
     */
    public AlbumsRecord() {
        super(Albums.ALBUMS);
    }

    /**
     * Create a detached, initialised AlbumsRecord
     */
    public AlbumsRecord(Integer albumid, String title, Integer artistid) {
        super(Albums.ALBUMS);

        set(0, albumid);
        set(1, title);
        set(2, artistid);
    }
}
