/*
 * This file is generated by jOOQ.
*/
package com.graphql.example.db.data.tables;


import com.graphql.example.db.data.DefaultSchema;
import com.graphql.example.db.data.Indexes;
import com.graphql.example.db.data.Keys;
import com.graphql.example.db.data.tables.records.EmployeesRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Employees extends TableImpl<EmployeesRecord> {

    private static final long serialVersionUID = -1305452542;

    /**
     * The reference instance of <code>employees</code>
     */
    public static final Employees EMPLOYEES = new Employees();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmployeesRecord> getRecordType() {
        return EmployeesRecord.class;
    }

    /**
     * The column <code>employees.EmployeeId</code>.
     */
    public final TableField<EmployeesRecord, Integer> EMPLOYEEID = createField("EmployeeId", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>employees.LastName</code>.
     */
    public final TableField<EmployeesRecord, String> LASTNAME = createField("LastName", org.jooq.impl.SQLDataType.NVARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>employees.FirstName</code>.
     */
    public final TableField<EmployeesRecord, String> FIRSTNAME = createField("FirstName", org.jooq.impl.SQLDataType.NVARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>employees.Title</code>.
     */
    public final TableField<EmployeesRecord, String> TITLE = createField("Title", org.jooq.impl.SQLDataType.NVARCHAR(30), this, "");

    /**
     * The column <code>employees.ReportsTo</code>.
     */
    public final TableField<EmployeesRecord, Integer> REPORTSTO = createField("ReportsTo", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>employees.BirthDate</code>.
     */
    public final TableField<EmployeesRecord, Timestamp> BIRTHDATE = createField("BirthDate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>employees.HireDate</code>.
     */
    public final TableField<EmployeesRecord, Timestamp> HIREDATE = createField("HireDate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>employees.Address</code>.
     */
    public final TableField<EmployeesRecord, String> ADDRESS = createField("Address", org.jooq.impl.SQLDataType.NVARCHAR(70), this, "");

    /**
     * The column <code>employees.City</code>.
     */
    public final TableField<EmployeesRecord, String> CITY = createField("City", org.jooq.impl.SQLDataType.NVARCHAR(40), this, "");

    /**
     * The column <code>employees.State</code>.
     */
    public final TableField<EmployeesRecord, String> STATE = createField("State", org.jooq.impl.SQLDataType.NVARCHAR(40), this, "");

    /**
     * The column <code>employees.Country</code>.
     */
    public final TableField<EmployeesRecord, String> COUNTRY = createField("Country", org.jooq.impl.SQLDataType.NVARCHAR(40), this, "");

    /**
     * The column <code>employees.PostalCode</code>.
     */
    public final TableField<EmployeesRecord, String> POSTALCODE = createField("PostalCode", org.jooq.impl.SQLDataType.NVARCHAR(10), this, "");

    /**
     * The column <code>employees.Phone</code>.
     */
    public final TableField<EmployeesRecord, String> PHONE = createField("Phone", org.jooq.impl.SQLDataType.NVARCHAR(24), this, "");

    /**
     * The column <code>employees.Fax</code>.
     */
    public final TableField<EmployeesRecord, String> FAX = createField("Fax", org.jooq.impl.SQLDataType.NVARCHAR(24), this, "");

    /**
     * The column <code>employees.Email</code>.
     */
    public final TableField<EmployeesRecord, String> EMAIL = createField("Email", org.jooq.impl.SQLDataType.NVARCHAR(60), this, "");

    /**
     * Create a <code>employees</code> table reference
     */
    public Employees() {
        this(DSL.name("employees"), null);
    }

    /**
     * Create an aliased <code>employees</code> table reference
     */
    public Employees(String alias) {
        this(DSL.name(alias), EMPLOYEES);
    }

    /**
     * Create an aliased <code>employees</code> table reference
     */
    public Employees(Name alias) {
        this(alias, EMPLOYEES);
    }

    private Employees(Name alias, Table<EmployeesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Employees(Name alias, Table<EmployeesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IFK_EMPLOYEEREPORTSTO);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<EmployeesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_EMPLOYEES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<EmployeesRecord> getPrimaryKey() {
        return Keys.PK_EMPLOYEES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<EmployeesRecord>> getKeys() {
        return Arrays.<UniqueKey<EmployeesRecord>>asList(Keys.PK_EMPLOYEES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<EmployeesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EmployeesRecord, ?>>asList(Keys.FK_EMPLOYEES_EMPLOYEES_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Employees as(String alias) {
        return new Employees(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Employees as(Name alias) {
        return new Employees(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Employees rename(String name) {
        return new Employees(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Employees rename(Name name) {
        return new Employees(name, null);
    }
}
